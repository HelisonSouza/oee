<div class="container bg-light">
  <h4>Painel Indicadores da Produção</h4>
  <div class="row">
    <div class="col-sm-8">
      <div class="row">
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Status</h4>
              <h1 class="font-weight-bold d-inline" id="status">Start</h1>
            </div>
          </div>
        </div>
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Realizado</h4>
              <h1 class="text-primary font-weight-bold d-inline" id="realizado">00</h1>
              <p class="d-inline m-2">und</p>
            </div>
          </div>
        </div>
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Falta</h4>
              <h1 class="text-primary font-weight-bold d-inline" id="falta">00</h1>
              <p class="d-inline m-2">und</p>
            </div>
          </div>
        </div>
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Velocidade Média</h4>
              <h1 class="text-primary font-weight-bold d-inline" id="velocidade">00</h1>
              <p class="d-inline ml-2">/min</p>
            </div>
          </div>
        </div>
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Encerramento em </h4>
              <h1 class="text-primary font-weight-bold d-inline" id="enceraEm">00:00</h1>
            </div>
          </div>
        </div>
        <div class="col-sm-4">
          <div class="card p-2 m-2 shadow">
            <div class="card-body text-center">
              <h4 class="card-title">Defeito </h4>
              <h1 class="text-danger font-weight-bold d-inline" id="defeito">00</h1>
              <p class="d-inline ml-2"> und</p>
            </div>
          </div>
        </div>


      </div>
    </div>
    <div class="col-sm-4">
      <div class="m-auto">
        <h4 class="">Planejado </h4>

        <p class="d-inline">Produto: </p>
        <p class="d-inline ml-2" id="produto"> </p>
        <br>
        <p class="d-inline">Quantidade: </p>
        <p class="d-inline" id="quantidade"></p>
        <p class="d-inline">unidades </p>
        <br>
        <p class="d-inline">Lote: </p>
        <p class="d-inline" id="lote"> </p>
        <br>
        <p class="d-inline">Meta: </p>
        <p class="d-inline" id="meta">00 </p>
        <p class="d-inline">und/min</p>
        <br>
        <p class="d-inline">Inicio: </p>
        <p class="d-inline" id="inicio"> </p>
        <script>

        </script>
        <p class="d-inline" id="dataInicio"></p>
        <br>
        <p class="d-inline">Fim: </p>
        <p class="d-inline">20/10/2020 13:30 </p>

      </div>

    </div>
  </div>

  <div class="row mt-4">
    <div class="col-sm-12">
      <div class="card m-auto  shadow">
        <div class="card-body">
          <div id="chart"></div>
        </div>
      </div>
    </div>

  </div>

  <div class="row mt-4">
    <div class="col-sm-12">
      <div class="m-auto p-4 shadow">
        <h4>Eventos identificadas</h4>
        <table class="table table-sm">
          <thead>
            <tr>
              <th scope="col">Tipo</th>
              <th scope="col">Período</th>
              <th scope="col">Duração</th>
              <th scope="col">Descrição</th>
            </tr>
          </thead>
          <tbody id="listaDeEventos">

          </tbody>
        </table>
      </div>
    </div>
  </div>

</div>



<script src="/socket.io/socket.io.js"> </script>

<script>
  //inicializa variáveis
  let encerramentoEm = 0
  let velocidadeMedia = 0
  let falta = 0
  let segundosTotais = 0
  let status = "Rodando"
  var dadosPausas = {}

  //aponta pra o socket server
  var socket = io()
  socket.on('connect', () => {
    console.log(`Conectado: ${socket.id}`)
  })

  // Informa a view que uma produção foi inicialiazada
  window.onload = () => {
    socket.emit('onload')
  }

  //Recebe os dados da produção inicializada
  socket.on('dadosDaProducao', (dadosDaProducao) => {
    console.log(dadosDaProducao)
    velocidadeMedia = dadosDaProducao.velocidade_media
    falta = (dadosDaProducao.qtd_planejada - dadosDaProducao.qtd_produzida)
    calculaTempoEstimadoEnceramento()
    atualizaDados(dadosDaProducao)
    tratarDadosTimeLine(dadosDaProducao)
    geraEventosDePausas(dadosDaProducao)
  })

  //Recebe os dados adicionais
  socket.on('dadosAdicionais', (dados) => {
    console.log(dados)
    status = dados.status
    atualizaDadosAdicionais()
  })

  atualizaDados = (dadosRecebidos) => {
    //Formata datas
    const data = dadosRecebidos.data;
    const dataFormatada = dateFns.format(data, "YY/MM/YYYY - HH:mm")

    //Atualiza o value dos elementos

    document.getElementById('realizado').innerHTML = dadosRecebidos.qtd_produzida
    document.getElementById('falta').innerHTML = falta
    document.getElementById('velocidade').innerHTML = velocidadeMedia
    document.getElementById('enceraEm').innerHTML = encerramentoEm
    document.getElementById('defeito').innerHTML = dadosRecebidos.qtd_defeito
    document.getElementById('produto').innerHTML = dadosRecebidos.produto.nome
    document.getElementById('quantidade').innerHTML = dadosRecebidos.qtd_planejada
    document.getElementById('lote').innerHTML = dadosRecebidos.lote
    document.getElementById('meta').innerHTML = dadosRecebidos.produto.velocidade
    document.getElementById('inicio').innerHTML = dataFormatada
  }

  atualizaDadosAdicionais = () => {
    if (status === "Parada")
      document.getElementById('status').style.color = '#FF0000'

    if (status === "Rodando")
      document.getElementById('status').style.color = '#00cc00'

    document.getElementById('status').innerHTML = status
  }

  calculaTempoEstimadoEnceramento = () => {
    segundosTotais = (falta / velocidadeMedia) * 60

    let h = parseInt(segundosTotais / 3600)
    let m = parseInt((segundosTotais % 3600) / 60)
    let s = parseInt((segundosTotais % 3600) % 60)

    h = ((h < 10) ? "0" : "") + h
    m = ((m < 10) ? ":0" : ":") + m
    s = ((s < 10) ? ":0" : ":") + s

    encerramentoEm = `${h}${m}${s}`
  }

  geraEventosDePausas = (dados) => {
    let pausas = dados.pausas
    let results = []
    pausas.forEach((valor, index) => {

      const inicioFormat = dateFns.format(valor.inicio, "HH:mm")
      const fimFormat = dateFns.format(valor.fim, "HH:mm")

      date1 = new Date(valor.inicio),
        date2 = new Date(valor.fim);

      var diffMs = (date2 - date1);
      var diffHrs = Math.floor((diffMs % 86400000) / 3600000);
      var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
      diffHrs === 0 ? diffHrs = "00" : ""
      diffMins === 0 ? diffMins = "00" : ""
      const duracao = diffHrs + ':' + diffMins + ' m';

      results[index] = {
        nome: valor.nome,
        inicio: inicioFormat,
        fim: fimFormat,
        duracao: duracao
      }
    })
    addLinhaEventoPausa(results)
  }

  tratarDadosTimeLine = (dados) => {
    dados.pausas.map((arr) => {
      //console.log(arr)
    })
  }

  addLinhaEventoPausa = (pausas) => {
    console.log(pausas)
    pausas.forEach((pausa) => {

      var tr = document.createElement("tr")

      tr.innerHTML = `
        <tr>
          <td>Pausa</td>
          <td>${pausa.inicio} as ${pausa.fim}</td>
          <td>${pausa.duracao}</td>
          <td>${pausa.nome}</td>
        </tr>
      `
      document.getElementById('listaDeEventos').appendChild(tr)
    })
  }

</script>

<script> //charts
  var options = {
    series: [
      // Produzindo
      {
        name: 'Produzindo',
        data: [
          {
            x: 'Produção',
            y: [
              new Date(2010, 1, 1).getTime(),
              new Date(2015, 1, 1).getTime()
            ]
          },
        ]
      },
      // Pausa
      {
        name: 'Pausa',
        data: [
          {
            x: 'Produção',
            y: [
              new Date(2015, 1, 2).getTime(),
              new Date(2018, 1, 1).getTime()
            ]
          },
        ]
      },
      // Parada
      {
        name: 'Parada',
        data: [
          {
            x: 'Produção',
            y: [
              new Date(2018, 1, 2).getTime(),
              new Date(2020, 1, 1).getTime()
            ]
          },
        ]
      },

    ],
    chart: {
      height: 150,
      type: 'rangeBar',
      toolbar: { tools: { download: false } }
    },
    plotOptions: {
      bar: {
        horizontal: true,
        barHeight: '50%',
        rangeBarGroupRows: true
      }
    },
    colors: [
      "#008FFB", "#00E396", "#ff0000"
    ],
    fill: {
      type: 'solid'
    },
    xaxis: {
      type: 'datetime'
    },
    legend: {
      position: 'right'
    },
    tooltip: {
      custom: function (opts) {
        const fromYear = new Date(opts.y1).getFullYear()
        const toYear = new Date(opts.y2).getFullYear()
        const values = opts.ctx.rangeBar.getTooltipValues(opts)

        return (
          ''
        )
      }
    }
  };

  var chart = new ApexCharts(document.querySelector("#chart"), options);
  chart.render();
</script>